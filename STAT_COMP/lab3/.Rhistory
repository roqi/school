}
Pclass.Survival
---
title: "HW1 - Titanic"
author: "Salim M'jahad msm2243"
date: "February 6, 2018"
output: pdf_document
---
# Part 1: Importing Data into R
i. Importing the Titanic dataset into RStudio
```{r}
titanic <- read.table("Titanic.txt", as.is = TRUE, header = TRUE)
```
ii. Number of rows and columns of data
```{r}
dim(titanic)
```
iii. Create a new variable in the data frame called Survived.Word. It should read either
“survived” or “died” indicating whether the passenger survived or died.
```{r}
Survived.Word <- titanic$Survived
Survived.Word[Survived.Word == 1] <- "survived"
Survived.Word[Survived.Word == 0] <- "died"
typeof(Survived.Word)
```
# Part 2: Exploring the Data in R
i. Use the *apply()* function to calculate the mean of the variables Survived, Age, and
Fare. This will require using the *apply()* function on a sub-matrix of dimension 891×3.
Explain what the mean of Survived tells us. One of the mean values is NA. Which
variable has a mean value of NA and why is this the case?
```{r}
three <- cbind(titanic["Survived"],titanic["Age"],titanic["Fare"])
apply(three, 2, mean)
```
Age has a mean of NA because the Age column has some NA values. R does not skip those values by default.
ii. Compute the proportion of female passengers who survived the titanic disaster. Round
your answer to 2 decimals using the *round()* function. Hint *?round*. Note: This is
not a conditional probability.
iii. Of the survivors, compute the proportion of female passengers. Round your answer to 2
decimals. This answer may take a few lines of code. One strategy would be to create a
survivors matrix that only includes individuals who survived the disaster. Then using
the survived matrix, calculate the proportion of females. Note: This is a conditional
probability
```{r}
survivors <- subset(titanic, Survived==1)$Sex
print(round(length(subset(survivors, survivors=="female"))/length(titanic$Survived), digits=2))
print(round(length(subset(survivors, survivors=="female"))/length(survivors), digits=2))
```
26% of passengers are female survivors.
68% of survivors are female.
iv. Use the following code to create an empty numeric vector of length three called Pclass.Survival. We will fill in the elements of Pclass.Survival with the survival rates of the three classes.
```{r}
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
class_sub <- subset(titanic, Pclass==i)
surv <- length(subset(class_sub$Survived, class_sub$Survived==1))/length(class_sub$Survived)
Pclass.Survival[i] <- round(surv, digits = 2)
}
Pclass.Survival
```
v. Now create a Pclass.Survival2 vector that should equal the Pclass.Survival vector
from the previous question, but use the tapply() function. Again, round the values to
2 decimals.
```{r}
Pclass.Survival2 <- round(tapply(titanic$Survived, titanic$Pclass, mean), digits=2)
Pclass.Survival2
```
vi. The more premium a passenger's class (closer to 1 aka lower although it is a "higher class"), the more likely they are to survive the Titanic crash.
titanic <- read.table("Titanic.txt", as.is = TRUE, header = TRUE)
dim(titanic)
Survived.Word <- titanic$Survived
Survived.Word[Survived.Word == 1] <- "survived"
Survived.Word[Survived.Word == 0] <- "died"
typeof(Survived.Word)
three <- cbind(titanic["Survived"],titanic["Age"],titanic["Fare"])
apply(three, 2, mean)
survivors <- subset(titanic, Survived==1)$Sex
print(round(length(subset(survivors, survivors=="female"))/length(titanic$Survived), digits=2))
print(round(length(subset(survivors, survivors=="female"))/length(survivors), digits=2))
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
for (i in 1:3) {
class_sub <- subset(titanic, Pclass==i)
surv <- length(subset(class_sub$Survived, class_sub$Survived==1))/length(class_sub$Survived)
Pclass.Survival[i] <- round(surv, digits = 2)
}
Pclass.Survival
Pclass.Survival2 <- round(tapply(titanic$Survived, titanic$Pclass, mean), digits=2)
Pclass.Survival2
boxplot(Sepal.Width~Versicolor,main="comp boxplot of sepal width split by species==versicolor",ylab="sepal width",data=iris)
boxplot(Sepal.Width~Versicolor,main="comp boxplot of sepal width split by species==versicolor",ylab="sepal width",data=iris)
## head function
head(iris)
## names function
names(iris)
#-- R code goes here ----
Versicolor <- ifelse(iris[,"Species"]=="versicolor", 1, 0)
print(Versicolor)
# Don't forget to uncomment the code below
boxplot(Sepal.Width~Versicolor,main="comp boxplot of sepal width split by species==versicolor",ylab="sepal width",data=iris)
#-- R code goes here ----
tapply(iris$Sepal.Length,iris$Species,mean)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
# Loop
#for (j in measurements) {
#-- R code goes here ----
#-- Don't forget to uncomment the loop
#}
MeanFlowers
#-- R code goes here ----
mean(subset(iris, species=="setosa")$Sepal.Length)
#-- R code goes here ----
mean(subset(iris, Species=="setosa")$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
```{r}
MeanFlowers[j] <- tapply(iris$j,iris$Species,mean)
MeanFlowers[:][j] <- tapply(iris$j,iris$Species,mean)
MeanFlowers[:j] <- tapply(iris$j,iris$Species,mean)
MeanFlowers[,j] <- tapply(iris$j,iris$Species,mean)
MeanFlowers[j,] <- tapply(iris$j,iris$Species,mean)
# Loop
iris$measurements[2]
iris$measurements[2]
# Loop
measurements[2]
# Loop
iris$measurements[2]
# Loop
iris[measurements[2]]
MeanFlowers[j,] <- tapply(iris[measurements[2]],iris$Species,mean)
MeanFlowers[j,] <- tapply(iris[j],iris$Species,mean)
for (j in measurements) {
MeanFlowers[j,] <- tapply(iris[j],iris$Species,mean)
}
MeanFlowers[,j] <- tapply(iris[j],iris$Species,mean)
tapply(iris[j],iris$Species,mean)
for (j in measurements) {
tapply(iris[j],iris$Species,mean)
}
tapply(iris,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(iris$j,iris$Species,mean)
tapply(iris[j],iris$Species,mean)
tapply(iris$j,iris$Species,mean)
View(MeanFlowers)
tapply(iris$"Sepal.Length",iris$Species,mean)
tapply(iris$"Sepal.Length",iris$Species,mean)
j
tapply(iris$j,iris$Species,mean)
iris$j
j
iris$j
char(j)
tochar(j)
character(j)
toString(j)
iris$toString(j)
iris$=
tapply(iris[[j]],iris$Species,mean)
for (j in measurements) {
tapply(iris[[j]],iris$Species,mean)
}
for (j in measurements) {
tapply(iris[[j]],iris$Species,mean)
}
View(MeanFlowers)
View(MeanFlowers)
MeanFlowers[j] <- tapply(iris[[j]],iris$Species,mean)
for (j in measurements) {
MeanFlowers[j] <- tapply(iris[[j]],iris$Species,mean)
}
MeanFlowers[j,] <- tapply(iris[[j]],iris$Species,mean)
for (j in measurements) {
MeanFlowers[j,] <- tapply(iris[[j]],iris$Species,mean)
}
MeanFlowers[j,]
MeanFlowers[j,:]
MeanFlowers[j]
MeanFlowers <- matrix(0,nrow=4,ncol=3)
MeanFlowers[j]
MeanFlowers[j,]
MeanFlowers%j
MeanFlowers$j
MeanFlowers[j]
for (j in measurements) {
MeanFlowers[j] <- tapply(iris[[j]],iris$Species,mean)
}
MeanFlowers <- matrix(0,nrow=4,ncol=3)
MeanFlowers[j,] <- tapply(iris[[j]],iris$Species,mean)
for (j in measurements) {
MeanFlowers[j,] <- tapply(iris[[j]],iris$Species,mean)
}
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in 1:3) {
MeanFlowers[j, i] <- tmp[i]
}
}
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in c("setosa","versicolor","virginica")) {
MeanFlowers[j, i] <- tmp[i]
}
}
MeanFlowers[j, 1] <- tmp["setosa"]
tmp
tmp["setosa"]
tmp$"setosa"
tmp["setosa"][0]
toString(tmp["setosa"])
MeanFlowers
MeanFlowers[j, 1] <- toString(tmp["setosa"])
MeanFlowers[j, 1]
MeanFlowers[1, 1]
i = 0
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- toString(tmp["setosa"])
i <- i+1
}
i = 0
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp[j]
i <- i+1
}
i = 0
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp["setosa"]
MeanFlowers[i, 2] <- tmp["versicolor"]
MeanFlowers[i, 3] <- tmp["virginica"]
i <- i+1
}
i = 0
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[1, i] <- tmp["setosa"]
MeanFlowers[2, i] <- tmp["versicolor"]
MeanFlowers[3, i] <- tmp["virginica"]
i <- i+1
}
i = 0
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp["setosa"]
MeanFlowers[i, 2] <- tmp["versicolor"]
MeanFlowers[i, 3] <- tmp["virginica"]
i <- i+1
}
MeanFlowers
tmp
MeanFlowers
print(j)
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp["setosa"]
MeanFlowers[i, 2] <- tmp["versicolor"]
MeanFlowers[i, 3] <- tmp["virginica"]
i <- i+1
}
# Loop
i = 0
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp["setosa"]
MeanFlowers[i, 2] <- tmp["versicolor"]
MeanFlowers[i, 3] <- tmp["virginica"]
i <- i+1
}
i = 0
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp["setosa"]
MeanFlowers[i, 2] <- tmp["versicolor"]
MeanFlowers[i, 3] <- tmp["virginica"]
print(MeanFlowers[i, 1])
i <- i+1
}
print(tmp)
i = 0
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp["setosa"]
MeanFlowers[i, 2] <- tmp["versicolor"]
MeanFlowers[i, 3] <- tmp["virginica"]
print(tmp)
i <- i+1
}
i = 0
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 1] <- tmp["setosa"]
MeanFlowers[i, 2] <- tmp["versicolor"]
MeanFlowers[i, 3] <- tmp["virginica"]
print(tmp)
i <- i+1
}
MeanFlowers
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 0] <- tmp["setosa"]
MeanFlowers[i, 1] <- tmp["versicolor"]
MeanFlowers[i, 2] <- tmp["virginica"]
print(tmp)
i <- i+1
}
i = 0
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 0] <- tmp["setosa"]
MeanFlowers[i, 1] <- tmp["versicolor"]
MeanFlowers[i, 2] <- tmp["virginica"]
print(tmp)
i <- i+1
}
i = 0
for (j in measurements) {
print(j)
tmp <- tapply(iris[[j]],iris$Species,mean)
MeanFlowers[i, 0] <- tmp["setosa"]
MeanFlowers[i, 1] <- tmp["versicolor"]
MeanFlowers[i, 2] <- tmp["virginica"]
print(tmp)
i <- i+1
}
MeanFlowers
colnames(MeanFlowers)
colnames(MeanFlowers)
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
colnames(MeanFlowers)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
# Loop
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in colnames(MeanFlowers)) {
MeanFlowers[i, j] <- tmp[j]
}
}
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
# Loop
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in colnames(MeanFlowers)) {
MeanFlowers[j, i] <- tmp[j]
}
}
MeanFlowers
tmp[j]
tmp[i]
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
# Loop
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in colnames(MeanFlowers)) {
MeanFlowers[j, i] <- tmp[i]
}
}
MeanFlowers
## head function
head(iris)
## names function
names(iris)
#-- R code goes here ----
Versicolor <- ifelse(iris[,"Species"]=="versicolor", 1, 0)
print(Versicolor)
# Don't forget to uncomment the code below
boxplot(Sepal.Width~Versicolor,main="comp boxplot of sepal width split by species==versicolor",ylab="sepal width",data=iris)
#-- R code goes here ----
mean(subset(iris, Species=="setosa")$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
# Loop
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in colnames(MeanFlowers)) {
MeanFlowers[j, i] <- tmp[i]
}
}
MeanFlowers
rm([titanic, three])
rm(titanic, three)
rm(titanic, three, class_sub, class_survivors, classes, Pclass.Survival, Pclass.Survival2, surv, Survived.Word, survivors, total)
## head function
head(iris)
## names function
names(iris)
#-- R code goes here ----
Versicolor <- ifelse(iris[,"Species"]=="versicolor", 1, 0)
print(Versicolor)
# Don't forget to uncomment the code below
boxplot(Sepal.Width~Versicolor,main="comp boxplot of sepal width split by species==versicolor",ylab="sepal width",data=iris)
#-- R code goes here ----
mean(subset(iris, Species=="setosa")$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
# Loop
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in colnames(MeanFlowers)) {
MeanFlowers[j, i] <- tmp[i]
}
}
MeanFlowers
## head function
head(iris)
## names function
names(iris)
#-- R code goes here ----
Versicolor <- ifelse(iris[,"Species"]=="versicolor", 1, 0)
print(Versicolor)
# Don't forget to uncomment the code below
boxplot(Sepal.Width~Versicolor,main="comp boxplot of sepal width split by species==versicolor",ylab="sepal width",data=iris)
#-- R code goes here ----
mean(subset(iris, Species=="setosa")$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
# Loop
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in colnames(MeanFlowers)) {
MeanFlowers[j, i] <- tmp[i]
}
}
MeanFlowers
## head function
head(iris)
## names function
names(iris)
#-- R code goes here ----
Versicolor <- ifelse(iris[,"Species"]=="versicolor", 1, 0)
print(Versicolor)
# Don't forget to uncomment the code below
boxplot(Sepal.Width~Versicolor,main="comp boxplot of sepal width split by species==versicolor",ylab="sepal width",data=iris)
#-- R code goes here ----
mean(subset(iris, Species=="setosa")$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
colnames(MeanFlowers)
# Loop
for (j in measurements) {
tmp <- tapply(iris[[j]],iris$Species,mean)
for (i in colnames(MeanFlowers)) {
MeanFlowers[j, i] <- tmp[i]
}
}
MeanFlowers
